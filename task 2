{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "GRIP_the_sparks_foundation_task-2.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyN9rQScAOkXL4fNtQPgtfjK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/codejawk/GRIP-THE_SPARKS_FOUNDATION/blob/master/GRIP_the_sparks_foundation_task_2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R1DYiAS7rDEX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "outputId": "a3a1d2fe-ec66-4a8d-dbee-efb91b6998ab"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split  \n",
        "from sklearn.linear_model import LinearRegression\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6XXQSXBlur3c",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "url=\"https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv\"\n",
        "df=pd.read_csv(url)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nhaA0F_qvPje",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 197
        },
        "outputId": "0a2ccf5c-c41e-4529-d2ed-10368ae0c88f"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hours</th>\n",
              "      <th>Scores</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.5</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5.1</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.2</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>8.5</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.5</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Hours  Scores\n",
              "0    2.5      21\n",
              "1    5.1      47\n",
              "2    3.2      27\n",
              "3    8.5      75\n",
              "4    3.5      30"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GaDvepsovjY9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X=pd.DataFrame(df['Hours'])\n",
        "y=pd.DataFrame(df['Scores'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yH1uUnP8Xb7V",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8ps7J_s6vSkp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "outputId": "a203fa17-256b-49c1-d545-48d07cda4945"
      },
      "source": [
        "df.plot(x='Hours', y='Scores', style='o', figsize =(4,4))  \n",
        "plt.title('Hours vs Scores')  \n",
        "plt.xlabel('Hours Studied')  \n",
        "plt.ylabel('Score in percentage')  \n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q6-ZYv_VvbR9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.3, random_state=1 )"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xWmb4TJGxj2y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "5494ef4a-366a-455b-aee8-adea16253867"
      },
      "source": [
        "print(X_train.shape,X_test.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(17, 1) (8, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dw39Cf2gVGrr",
        "colab_type": "text"
      },
      "source": [
        "**Training the Simple Linear Regression model on the Training set**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XCuyF6YAVIBi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.linear_model import LinearRegression"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oxW8L9WwVcDO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "b899a78f-5eea-484d-ec8f-5c900de50a8a"
      },
      "source": [
        "model=LinearRegression()\n",
        "model.fit(X_train,y_train)\n",
        "\n",
        "#the intercept and the slope of the model will be:-\n",
        "print(\"Intercept: \",model.intercept_)\n",
        "print(\"slope: \",model.coef_)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Intercept:  [-1.51230612]\n",
            "slope:  [[10.41075981]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ozteWfPTW-Yr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "outputId": "4bd59ee2-03d7-47a8-9914-256492e381b8"
      },
      "source": [
        "#predicting the values of some new data\n",
        "pred=model.predict(X_test)\n",
        "xtest_np=np.array(X_test)\n",
        "\n",
        "print('hours_studied',\"--\",\"predicted marks\")\n",
        "for i in range(len(xtest_np)):\n",
        "  print(xtest_np[i],\"     -->\",pred[i])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "hours_studied -- predicted marks\n",
            "[1.1]      --> [9.93952968]\n",
            "[3.3]      --> [32.84320126]\n",
            "[1.9]      --> [18.26813752]\n",
            "[8.5]      --> [86.97915227]\n",
            "[4.8]      --> [48.45934097]\n",
            "[7.7]      --> [78.65054442]\n",
            "[6.1]      --> [61.99332873]\n",
            "[7.4]      --> [75.52731648]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZZIRf_EtY8Rb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "b98d5890-b957-4a70-ffba-21238c0c6c77"
      },
      "source": [
        "from sklearn.metrics import mean_absolute_error,mean_squared_error\n",
        "\n",
        "MAE=mean_absolute_error(pred,y_test)\n",
        "RMSE=np.sqrt(mean_squared_error(y_test,pred))\n",
        "print('Mean Absolute error :',MAE.round(2))\n",
        "print('Root Mean Squared Error :',RMSE.round(2))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mean Absolute error : 7.17\n",
            "Root Mean Squared Error : 7.49\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5hDubdA74seN",
        "colab_type": "text"
      },
      "source": [
        "**Putting effort to reduce the error!**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o5hQlTo94506",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e319ca5a-21cc-4bc4-dd1f-923c26499bfe"
      },
      "source": [
        "from sklearn.linear_model import Ridge,RidgeCV\n",
        "\n",
        "alphas = 10**np.linspace(10,-2,100)*0.5\n",
        "\n",
        "ridgecv = RidgeCV(alphas = alphas, scoring = 'neg_mean_squared_error', normalize = True)\n",
        "ridgecv.fit(X_train, y_train)\n",
        "print('Best Estimate :',ridgecv.alpha_)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best Estimate : 0.01155064850041579\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XLL1TJm24_Nk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "00eb817c-2ff0-4ed5-9eeb-0fc09ddfd104"
      },
      "source": [
        "model2=Ridge(alpha=0.01155,normalize=True)\n",
        "model2.fit(X_train,y_train)\n",
        "pred2=model2.predict(X_test)\n",
        "MAE2=mean_absolute_error(pred2,y_test)\n",
        "RMSE2=np.sqrt(mean_squared_error(pred2,y_test))\n",
        "print('Mean Absolute Error in Model 2: ',MAE2.round(2))\n",
        "print('Root Mean Squared Error in Model 1:',RMSE2.round(2))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mean Absolute Error in Model 2:  7.01\n",
            "Root Mean Squared Error in Model 1: 7.3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xiPgeGs86Cc6",
        "colab_type": "text"
      },
      "source": [
        "so we successfully reduce our mae from 7.17 to 7.01 and also rms from 7.49 to 7.3\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xA4mPeln4_Qt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "01554337-3f2a-44a4-b57d-d1cba478381e"
      },
      "source": [
        "#increasing the training size: \n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.35, random_state=1 ) # test_size increased from 0.3 to 0.35\n",
        "\n",
        "# testing on model1:\n",
        "pred=model.predict(X_test)\n",
        "xtest_np=np.array(X_test)\n",
        "\n",
        "from sklearn.metrics import mean_absolute_error,mean_squared_error\n",
        "\n",
        "MAE=mean_absolute_error(pred,y_test)\n",
        "RMSE=np.sqrt(mean_squared_error(y_test,pred))\n",
        "print('Mean Absolute error :',MAE.round(2))\n",
        "print('Root Mean Squared Error :',RMSE.round(2))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mean Absolute error : 6.92\n",
            "Root Mean Squared Error : 7.25\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bBSD7QFU7upz",
        "colab_type": "text"
      },
      "source": [
        "This certainly proves that the model depends on the training size. BOOM!\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wQ63Id3FZBBg",
        "colab_type": "text"
      },
      "source": [
        "**Visualising the results**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DtpBoOPHaFmS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "outputId": "3552794a-ea20-4fcc-bd38-6659a50038a3"
      },
      "source": [
        "plt.scatter(X, y, color = 'green')\n",
        "plt.plot(X_train, model2.predict(X_train), color = 'silver')\n",
        "plt.title('Score vs hour')\n",
        "plt.xlabel('Hour')\n",
        "plt.ylabel('Score')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ULbph7o7ibAh",
        "colab_type": "text"
      },
      "source": [
        "# Q.What will be predicted score if a student study for 9.25 hrs in a day?\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kt7K8nxFiYB_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "0b86d45b-b41e-4cfa-e6e6-02db28135064"
      },
      "source": [
        "noh = 9.25\n",
        "print(\"Number of hours : \",noh)\n",
        "print(\"Predicted score : \",model2.predict(np.array(noh).reshape(1,-1))[0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of hours :  9.25\n",
            "Predicted score :  [94.27852284]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "695LYTK0iskB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sirDB4gLi5zZ",
        "colab_type": "text"
      },
      "source": [
        "#                            END OF TASK-2\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z5KDevlxi9AZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
